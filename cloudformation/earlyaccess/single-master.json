{
  "Description": "Launching the Mesosphere DCOS cluster",
  "Outputs": {
    "DnsAddress": {
      "Description": "Mesos Master",
      "Value": {
        "Fn::GetAtt": [
          "ElasticLoadBalancer",
          "DNSName"
        ]
      }
    },
    "PublicSlaveDnsAddress": {
      "Description": "Public slaves",
      "Value": {
        "Fn::GetAtt": [
          "PublicSlaveLoadBalancer",
          "DNSName"
        ]
      }
    }
  },
  "Conditions": {
    "RegionIsUsEast1": {
      "Fn::Equals": [
        {
          "Ref": "AWS::Region"
        },
        "us-east-1"
      ]
    }
  },
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "PublicSlaveInstanceCount": {
      "Type": "Number",
      "Description": "Required: Specify the number of public agent nodes or accept the default.",
      "Default": "1"
    },
    "SlaveInstanceCount": {
      "Type": "Number",
      "Description": "Required: Specify the number of private agent nodes or accept the default.",
      "Default": "5"
    },
    "AdminLocation": {
      "Type": "String",
      "Description": "Optional: Specify the IP range to whitelist for access to the admin zone. Must be a valid CIDR.",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "^([0-9]+\\.){3}[0-9]+\\/[0-9]+$",
      "MaxLength": "18",
      "ConstraintDescription": "must be a valid CIDR.",
      "MinLength": "9"
    },
    "AcceptEULA": {
      "Type": "String",
      "Description": "\nRequired: Read the Mesosphere EULA and indicate agreement: https://docs.mesosphere.com/community-edition-eula/.",
      "AllowedValues": [
        "Yes"
      ]
    },
    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Required: Specify your AWS EC2 Key Pair."
    }
  },
  "Mappings": {
    "NATAmi": {
      "ap-northeast-1": {
        "default": "ami-55c29e54"
      },
      "ap-southeast-1": {
        "default": "ami-b082dae2"
      },
      "eu-west-1": {
        "default": "ami-3760b040"
      },
      "us-west-2": {
        "default": "ami-bb69128b"
      },
      "eu-central-1": {
        "default": "ami-204c7a3d"
      },
      "ap-southeast-2": {
        "default": "ami-996402a3"
      },
      "us-west-1": {
        "default": "ami-2b2b296e"
      },
      "us-east-1": {
        "default": "ami-4c9e4b24"
      },
      "sa-east-1": {
        "default": "ami-b972dba4"
      }
    },
    "RegionToAmi": {
      "ap-northeast-1": {
        "stable": "ami-84e0c7ea"
      },
      "ap-southeast-1": {
        "stable": "ami-da67a0b9"
      },
      "eu-west-1": {
        "stable": "ami-55d20b26"
      },
      "us-west-2": {
        "stable": "ami-00ebfc61"
      },
      "us-gov-west-1": {
        "stable": "ami-05bc0164"
      },
      "eu-central-1": {
        "stable": "ami-fdd4c791"
      },
      "ap-southeast-2": {
        "stable": "ami-f35b0590"
      },
      "us-west-1": {
        "stable": "ami-27553a47"
      },
      "us-east-1": {
        "stable": "ami-37bdc15d"
      },
      "sa-east-1": {
        "stable": "ami-154af179"
      }
    },
    "Parameters": {
      "PrivateSubnetRange": {
        "default": "10.0.0.0/22"
      },
      "PublicSubnetRange": {
        "default": "10.0.4.0/22"
      },
      "PublicSlaveInstanceType": {
        "default": "m3.xlarge"
      },
      "SlaveInstanceType": {
        "default": "m3.xlarge"
      },
      "StackCreationTimeout": {
        "default": "PT45M"
      },
      "MasterInstanceType": {
        "default": "m3.xlarge"
      },
      "VPCSubnetRange": {
        "default": "10.0.0.0/16"
      }
    }
  },
  "Resources": {
    "PublicSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "SubnetId": {
          "Ref": "PublicSubnet"
        }
      }
    },
    "SlaveToSlaveIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "0",
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "SlaveSecurityGroup"
        },
        "ToPort": "65535",
        "GroupId": {
          "Ref": "SlaveSecurityGroup"
        }
      }
    },
    "PublicSlaveIngressThree": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "5052",
        "CidrIp": "0.0.0.0/0",
        "IpProtocol": "tcp",
        "ToPort": "65535",
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        }
      }
    },
    "MasterToMasterIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "0",
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "MasterSecurityGroup"
        },
        "ToPort": "65535",
        "GroupId": {
          "Ref": "MasterSecurityGroup"
        }
      }
    },
    "MasterToPublicSlaveIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "0",
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "MasterSecurityGroup"
        },
        "ToPort": "65535",
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        }
      }
    },
    "MasterSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Mesos Masters",
        "VpcId": {
          "Ref": "Vpc"
        },
        "SecurityGroupIngress": [
          {
            "FromPort": "5050",
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Ref": "LbSecurityGroup"
            },
            "ToPort": "5050"
          },
          {
            "FromPort": "80",
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Ref": "LbSecurityGroup"
            },
            "ToPort": "80"
          },
          {
            "FromPort": "8080",
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Ref": "LbSecurityGroup"
            },
            "ToPort": "8080"
          },
          {
            "FromPort": "8181",
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Ref": "LbSecurityGroup"
            },
            "ToPort": "8181"
          },
          {
            "FromPort": "2181",
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Ref": "LbSecurityGroup"
            },
            "ToPort": "2181"
          }
        ]
      }
    },
    "PublicSlaveToSlaveIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "0",
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "ToPort": "65535",
        "GroupId": {
          "Ref": "SlaveSecurityGroup"
        }
      }
    },
    "SlaveToPublicSlaveIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "0",
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "SlaveSecurityGroup"
        },
        "ToPort": "65535",
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        }
      }
    },
    "PublicSlaveIngressOne": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "0",
        "CidrIp": "0.0.0.0/0",
        "IpProtocol": "tcp",
        "ToPort": "21",
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        }
      }
    },
    "SlaveRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyName": "Slaves",
            "PolicyDocument": {
              "Statement": [
                {
                  "Resource": [
                    {
                      "Ref": "AWS::StackId"
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Ref": "AWS::StackId"
                          },
                          "/*"
                        ]
                      ]
                    }
                  ],
                  "Effect": "Allow",
                  "Action": [
                    "cloudformation:*"
                  ]
                }
              ],
              "Version": "2012-10-17"
            }
          }
        ]
      }
    },
    "PublicSubnetNetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet"
        },
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        }
      }
    },
    "SlaveServerGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn": "GatewayToInternet",
      "Properties": {
        "LaunchConfigurationName": {
          "Ref": "SlaveLaunchConfig"
        },
        "VPCZoneIdentifier": [
          {
            "Ref": "PrivateSubnet"
          }
        ],
        "AvailabilityZones": [
          {
            "Fn::GetAtt": [
              "PrivateSubnet",
              "AvailabilityZone"
            ]
          }
        ],
        "DesiredCapacity": {
          "Ref": "SlaveInstanceCount"
        },
        "MinSize": {
          "Ref": "SlaveInstanceCount"
        },
        "Tags": [
          {
            "PropagateAtLaunch": "true",
            "Key": "role",
            "Value": "mesos-slave"
          }
        ],
        "MaxSize": {
          "Ref": "SlaveInstanceCount"
        }
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": {
            "Ref": "SlaveInstanceCount"
          },
          "Timeout": {
            "Fn::FindInMap": [
              "Parameters",
              "StackCreationTimeout",
              "default"
            ]
          }
        }
      }
    },
    "PrivateRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "MasterRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "ExhibitorS3Bucket"
                          },
                          "/*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "ExhibitorS3Bucket"
                          }
                        ]
                      ]
                    }
                  ],
                  "Action": [
                    "s3:AbortMultipartUpload",
                    "s3:DeleteObject",
                    "s3:GetBucketAcl",
                    "s3:GetBucketPolicy",
                    "s3:GetObject",
                    "s3:GetObjectAcl",
                    "s3:ListBucket",
                    "s3:ListBucketMultipartUploads",
                    "s3:ListMultipartUploadParts",
                    "s3:PutObject",
                    "s3:PutObjectAcl"
                  ]
                },
                {
                  "Resource": [
                    {
                      "Ref": "AWS::StackId"
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Ref": "AWS::StackId"
                          },
                          "/*"
                        ]
                      ]
                    }
                  ],
                  "Effect": "Allow",
                  "Action": [
                    "cloudformation:*"
                  ]
                },
                {
                  "Resource": "*",
                  "Effect": "Allow",
                  "Action": [
                    "ec2:DescribeKeyPairs",
                    "ec2:DescribeSubnets",
                    "autoscaling:DescribeLaunchConfigurations",
                    "autoscaling:UpdateAutoScalingGroup",
                    "autoscaling:DescribeAutoScalingGroups",
                    "autoscaling:DescribeScalingActivities",
                    "elasticloadbalancing:DescribeLoadBalancers"
                  ]
                }
              ],
              "Version": "2012-10-17"
            }
          }
        ]
      }
    },
    "PublicSlaveIngressTwo": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "23",
        "CidrIp": "0.0.0.0/0",
        "IpProtocol": "tcp",
        "ToPort": "5050",
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        }
      }
    },
    "MasterLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#cloud-config\n",
                "\"coreos\":\n",
                "  \"units\":\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"mask\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      etcd.service\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"mask\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      update-engine.service\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"mask\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      locksmithd.service\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"name\": |-\n",
                "      systemd-resolved.service\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Description=Formats the /var/lib ephemeral drive\n",
                "      Before=var-lib.mount dbus.service\n",
                "      [Service]\n",
                "      Type=oneshot\n",
                "      RemainAfterExit=yes\n",
                "      ExecStart=/bin/bash -c \"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\"\n",
                "    \"name\": |-\n",
                "      format-var-lib-ephemeral.service\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Description=Mount /var/lib\n",
                "      Before=dbus.service\n",
                "      [Mount]\n",
                "      What=/dev/xvdb\n",
                "      Where=/var/lib\n",
                "      Type=ext4\n",
                "    \"name\": |-\n",
                "      var-lib.mount\n",
                "  - \"command\": |-\n",
                "      restart\n",
                "    \"name\": |-\n",
                "      systemd-journald.service\n",
                "  - \"command\": |-\n",
                "      restart\n",
                "    \"name\": |-\n",
                "      docker.service\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Before=dcos.target\n",
                "      [Service]\n",
                "      Type=oneshot\n",
                "      StandardOutput=journal+console\n",
                "      StandardError=journal+console\n",
                "      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\n",
                "      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\n",
                "    \"name\": |-\n",
                "      dcos-link-env.service\n",
                "  - \"content\": |\n",
                "      [Unit]\n",
                "      Description=Download the DCOS\n",
                "      After=network-online.target\n",
                "      Wants=network-online.target\n",
                "      ConditionPathExists=!/opt/mesosphere/\n",
                "      [Service]\n",
                "      EnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\n",
                "      Type=oneshot\n",
                "      StandardOutput=journal+console\n",
                "      StandardError=journal+console\n",
                "      ExecStartPre=/usr/bin/curl --fail --retry 20 --continue-at - --location --silent --show-error --verbose --output /tmp/bootstrap.tar.xz https://downloads.mesosphere.com/dcos/EarlyAccess/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz\n",
                "      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\n",
                "      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\n",
                "      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\n",
                "    \"name\": |-\n",
                "      dcos-download.service\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Description=Prep the Pkgpanda working directories for this host.\n",
                "      Requires=dcos-download.service\n",
                "      After=dcos-download.service\n",
                "      [Service]\n",
                "      Type=oneshot\n",
                "      StandardOutput=journal+console\n",
                "      StandardError=journal+console\n",
                "      EnvironmentFile=/opt/mesosphere/environment\n",
                "      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\n",
                "      [Install]\n",
                "      WantedBy=multi-user.target\n",
                "    \"enable\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      dcos-setup.service\n",
                "    \"no_block\": !!bool |-\n",
                "      true\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |-\n",
                "      [Unit]\n",
                "      Description=Signal CloudFormation Success\n",
                "      After=dcos.target\n",
                "      Requires=dcos.target\n",
                "      ConditionPathExists=!/var/lib/dcos-cfn-signal\n",
                "      [Service]\n",
                "      Type=simple\n",
                "      Restart=on-failure\n",
                "      StartLimitInterval=0\n",
                "      RestartSec=15s\n",
                "      EnvironmentFile=/opt/mesosphere/environment\n",
                "      EnvironmentFile=/opt/mesosphere/etc/cfn_signal_metadata\n",
                "      Environment=\"AWS_CFN_SIGNAL_THIS_RESOURCE=MasterServerGroup\"\n",
                "      ExecStartPre=/bin/ping -c1 leader.mesos\n",
                "      ExecStartPre=/opt/mesosphere/bin/cfn-signal\n",
                "      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal\n",
                "    \"name\": |-\n",
                "      dcos-cfn-signal.service\n",
                "  \"update\":\n",
                "    \"reboot-strategy\": |-\n",
                "      off\n",
                "\"write_files\":\n",
                "- \"content\": |\n",
                "    https://downloads.mesosphere.com/dcos/EarlyAccess\n",
                "  \"owner\": |-\n",
                "    root\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-flags/repository-url\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    BOOTSTRAP_ID=ba95b3cd10feeca83111a84137c517000fa205d8\n",
                "  \"owner\": |-\n",
                "    root\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-flags/bootstrap-id\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    [\"dcos-config--setup_81202b73c3b20f0ed21af57c9d6031e801728730\", \"dcos-metadata--setup_81202b73c3b20f0ed21af57c9d6031e801728730\"]\n",
                "  \"owner\": |-\n",
                "    root\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-flags/cluster-packages.json\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    [Journal]\n",
                "    MaxLevelConsole=warning\n",
                "  \"owner\": |-\n",
                "    root\n",
                "  \"path\": |-\n",
                "    /etc/systemd/journald.conf.d/dcos.conf\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    ",
                {
                  "Ref": "AWS::StackId"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/cluster-id\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    AWS_REGION=",
                {
                  "Ref": "AWS::Region"
                },
                "",
                "\n",
                "    AWS_STACK_ID=",
                {
                  "Ref": "AWS::StackId"
                },
                "",
                "\n",
                "    AWS_STACK_NAME=",
                {
                  "Ref": "AWS::StackName"
                },
                "",
                "\n",
                "    AWS_IAM_MASTER_ROLE_NAME=",
                {
                  "Ref": "MasterRole"
                },
                "",
                "\n",
                "    AWS_IAM_SLAVE_ROLE_NAME=",
                {
                  "Ref": "SlaveRole"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cfn_signal_metadata\n",
                "- \"content\": |\n",
                "    MESOS_CLUSTER=",
                {
                  "Ref": "AWS::StackName"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\n",
                "- \"content\": |\n",
                "    MASTER_SOURCE=exhibitor\n",
                "    EXHIBITOR_ADDRESS=",
                {
                  "Fn::GetAtt": [
                    "InternalMasterLoadBalancer",
                    "DNSName"
                  ]
                },
                "",
                "\n",
                "    RESOLVERS=169.254.169.253\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/dns_config\n",
                "- \"content\": |\n",
                "    EXHIBITOR_BACKEND=AWS_S3\n",
                "    AWS_REGION=",
                {
                  "Ref": "AWS::Region"
                },
                "",
                "\n",
                "    AWS_S3_BUCKET=",
                {
                  "Ref": "ExhibitorS3Bucket"
                },
                "",
                "\n",
                "    AWS_S3_PREFIX=",
                {
                  "Ref": "AWS::StackName"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\n",
                "- \"content\": |-\n",
                "    {}\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\n",
                "- \"content\": \"\"\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/roles/master\n",
                "- \"content\": \"\"\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/roles/aws_master\n",
                "- \"content\": \"\"\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/roles/aws\n"
              ]
            ]
          }
        },
        "AssociatePublicIpAddress": "true",
        "IamInstanceProfile": {
          "Ref": "MasterInstanceProfile"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "RegionToAmi",
            {
              "Ref": "AWS::Region"
            },
            "stable"
          ]
        },
        "SecurityGroups": [
          {
            "Ref": "MasterSecurityGroup"
          },
          {
            "Ref": "AdminSecurityGroup"
          }
        ],
        "BlockDeviceMappings": [
          {
            "VirtualName": "ephemeral0",
            "DeviceName": "/dev/sdb"
          }
        ],
        "KeyName": {
          "Ref": "KeyName"
        },
        "InstanceType": {
          "Fn::FindInMap": [
            "Parameters",
            "MasterInstanceType",
            "default"
          ]
        }
      }
    },
    "MasterInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "MasterRole"
          }
        ],
        "Path": "/"
      }
    },
    "PublicNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "VPCDHCPOptionsAssociation": {
      "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "DhcpOptionsId": {
          "Ref": "DHCPOptions"
        }
      }
    },
    "PublicSlaveLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "DependsOn": "GatewayToInternet",
      "Properties": {
        "SecurityGroups": [
          {
            "Ref": "PublicSlaveSecurityGroup"
          }
        ],
        "Listeners": [
          {
            "LoadBalancerPort": "80",
            "InstancePort": "80",
            "InstanceProtocol": "HTTP",
            "Protocol": "HTTP"
          },
          {
            "LoadBalancerPort": "443",
            "InstancePort": "443",
            "InstanceProtocol": "TCP",
            "Protocol": "TCP"
          }
        ],
        "HealthCheck": {
          "Interval": "30",
          "UnhealthyThreshold": "2",
          "Timeout": "5",
          "Target": "HTTP:80/",
          "HealthyThreshold": "2"
        },
        "Subnets": [
          {
            "Ref": "PublicSubnet"
          }
        ]
      }
    },
    "PrivateSubnetNetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet"
        },
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        }
      }
    },
    "SlaveInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "SlaveRole"
          }
        ],
        "Path": "/"
      }
    },
    "SlaveToMasterIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "0",
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "SlaveSecurityGroup"
        },
        "ToPort": "65535",
        "GroupId": {
          "Ref": "MasterSecurityGroup"
        }
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "DependsOn": "Vpc",
      "Properties": {
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "InboundNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "RuleNumber": "100",
        "CidrBlock": "0.0.0.0/0",
        "Egress": "false",
        "Protocol": "-1",
        "PortRange": {
          "From": "0",
          "To": "65535"
        },
        "RuleAction": "allow",
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        }
      }
    },
    "ExhibitorS3Bucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain"
    },
    "InternalMasterLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "SecurityGroups": [
          {
            "Ref": "LbSecurityGroup"
          },
          {
            "Ref": "AdminSecurityGroup"
          },
          {
            "Ref": "SlaveSecurityGroup"
          },
          {
            "Ref": "PublicSlaveSecurityGroup"
          },
          {
            "Ref": "MasterSecurityGroup"
          }
        ],
        "Scheme": "internal",
        "Listeners": [
          {
            "LoadBalancerPort": "5050",
            "InstancePort": "5050",
            "InstanceProtocol": "HTTP",
            "Protocol": "HTTP"
          },
          {
            "LoadBalancerPort": "2181",
            "InstancePort": "2181",
            "InstanceProtocol": "TCP",
            "Protocol": "TCP"
          },
          {
            "LoadBalancerPort": "8181",
            "InstancePort": "8181",
            "InstanceProtocol": "HTTP",
            "Protocol": "HTTP"
          },
          {
            "LoadBalancerPort": "80",
            "InstancePort": "80",
            "InstanceProtocol": "HTTP",
            "Protocol": "HTTP"
          },
          {
            "LoadBalancerPort": "443",
            "InstancePort": "443",
            "InstanceProtocol": "TCP",
            "Protocol": "TCP"
          },
          {
            "LoadBalancerPort": "8080",
            "InstancePort": "8080",
            "InstanceProtocol": "HTTP",
            "Protocol": "HTTP"
          }
        ],
        "HealthCheck": {
          "Interval": "30",
          "UnhealthyThreshold": "2",
          "Timeout": "5",
          "Target": "HTTP:5050/health",
          "HealthyThreshold": "2"
        },
        "Subnets": [
          {
            "Ref": "PublicSubnet"
          }
        ]
      }
    },
    "PublicSlaveIngressFour": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "0",
        "CidrIp": "0.0.0.0/0",
        "IpProtocol": "udp",
        "ToPort": "21",
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        }
      }
    },
    "PublicSlaveLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#cloud-config\n",
                "\"coreos\":\n",
                "  \"units\":\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"mask\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      etcd.service\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"mask\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      update-engine.service\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"mask\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      locksmithd.service\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"name\": |-\n",
                "      systemd-resolved.service\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Description=Formats the /var/lib ephemeral drive\n",
                "      Before=var-lib.mount dbus.service\n",
                "      [Service]\n",
                "      Type=oneshot\n",
                "      RemainAfterExit=yes\n",
                "      ExecStart=/bin/bash -c \"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\"\n",
                "    \"name\": |-\n",
                "      format-var-lib-ephemeral.service\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Description=Mount /var/lib\n",
                "      Before=dbus.service\n",
                "      [Mount]\n",
                "      What=/dev/xvdb\n",
                "      Where=/var/lib\n",
                "      Type=ext4\n",
                "    \"name\": |-\n",
                "      var-lib.mount\n",
                "  - \"command\": |-\n",
                "      restart\n",
                "    \"name\": |-\n",
                "      systemd-journald.service\n",
                "  - \"command\": |-\n",
                "      restart\n",
                "    \"name\": |-\n",
                "      docker.service\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Before=dcos.target\n",
                "      [Service]\n",
                "      Type=oneshot\n",
                "      StandardOutput=journal+console\n",
                "      StandardError=journal+console\n",
                "      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\n",
                "      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\n",
                "    \"name\": |-\n",
                "      dcos-link-env.service\n",
                "  - \"content\": |\n",
                "      [Unit]\n",
                "      Description=Download the DCOS\n",
                "      After=network-online.target\n",
                "      Wants=network-online.target\n",
                "      ConditionPathExists=!/opt/mesosphere/\n",
                "      [Service]\n",
                "      EnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\n",
                "      Type=oneshot\n",
                "      StandardOutput=journal+console\n",
                "      StandardError=journal+console\n",
                "      ExecStartPre=/usr/bin/curl --fail --retry 20 --continue-at - --location --silent --show-error --verbose --output /tmp/bootstrap.tar.xz https://downloads.mesosphere.com/dcos/EarlyAccess/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz\n",
                "      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\n",
                "      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\n",
                "      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\n",
                "    \"name\": |-\n",
                "      dcos-download.service\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Description=Prep the Pkgpanda working directories for this host.\n",
                "      Requires=dcos-download.service\n",
                "      After=dcos-download.service\n",
                "      [Service]\n",
                "      Type=oneshot\n",
                "      StandardOutput=journal+console\n",
                "      StandardError=journal+console\n",
                "      EnvironmentFile=/opt/mesosphere/environment\n",
                "      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\n",
                "      [Install]\n",
                "      WantedBy=multi-user.target\n",
                "    \"enable\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      dcos-setup.service\n",
                "    \"no_block\": !!bool |-\n",
                "      true\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |-\n",
                "      [Unit]\n",
                "      Description=Signal CloudFormation Success\n",
                "      After=dcos.target\n",
                "      Requires=dcos.target\n",
                "      ConditionPathExists=!/var/lib/dcos-cfn-signal\n",
                "      [Service]\n",
                "      Type=simple\n",
                "      Restart=on-failure\n",
                "      StartLimitInterval=0\n",
                "      RestartSec=15s\n",
                "      EnvironmentFile=/opt/mesosphere/environment\n",
                "      EnvironmentFile=/opt/mesosphere/etc/cfn_signal_metadata\n",
                "      Environment=\"AWS_CFN_SIGNAL_THIS_RESOURCE=PublicSlaveServerGroup\"\n",
                "      ExecStartPre=/bin/ping -c1 leader.mesos\n",
                "      ExecStartPre=/opt/mesosphere/bin/cfn-signal\n",
                "      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal\n",
                "    \"name\": |-\n",
                "      dcos-cfn-signal.service\n",
                "  \"update\":\n",
                "    \"reboot-strategy\": |-\n",
                "      off\n",
                "\"write_files\":\n",
                "- \"content\": |\n",
                "    https://downloads.mesosphere.com/dcos/EarlyAccess\n",
                "  \"owner\": |-\n",
                "    root\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-flags/repository-url\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    BOOTSTRAP_ID=ba95b3cd10feeca83111a84137c517000fa205d8\n",
                "  \"owner\": |-\n",
                "    root\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-flags/bootstrap-id\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    [\"dcos-config--setup_81202b73c3b20f0ed21af57c9d6031e801728730\", \"dcos-metadata--setup_81202b73c3b20f0ed21af57c9d6031e801728730\"]\n",
                "  \"owner\": |-\n",
                "    root\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-flags/cluster-packages.json\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    [Journal]\n",
                "    MaxLevelConsole=warning\n",
                "  \"owner\": |-\n",
                "    root\n",
                "  \"path\": |-\n",
                "    /etc/systemd/journald.conf.d/dcos.conf\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    ",
                {
                  "Ref": "AWS::StackId"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/cluster-id\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    AWS_REGION=",
                {
                  "Ref": "AWS::Region"
                },
                "",
                "\n",
                "    AWS_STACK_ID=",
                {
                  "Ref": "AWS::StackId"
                },
                "",
                "\n",
                "    AWS_STACK_NAME=",
                {
                  "Ref": "AWS::StackName"
                },
                "",
                "\n",
                "    AWS_IAM_MASTER_ROLE_NAME=",
                {
                  "Ref": "MasterRole"
                },
                "",
                "\n",
                "    AWS_IAM_SLAVE_ROLE_NAME=",
                {
                  "Ref": "SlaveRole"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cfn_signal_metadata\n",
                "- \"content\": |\n",
                "    MESOS_CLUSTER=",
                {
                  "Ref": "AWS::StackName"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\n",
                "- \"content\": |\n",
                "    MASTER_SOURCE=exhibitor\n",
                "    EXHIBITOR_ADDRESS=",
                {
                  "Fn::GetAtt": [
                    "InternalMasterLoadBalancer",
                    "DNSName"
                  ]
                },
                "",
                "\n",
                "    RESOLVERS=169.254.169.253\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/dns_config\n",
                "- \"content\": |\n",
                "    EXHIBITOR_BACKEND=AWS_S3\n",
                "    AWS_REGION=",
                {
                  "Ref": "AWS::Region"
                },
                "",
                "\n",
                "    AWS_S3_BUCKET=",
                {
                  "Ref": "ExhibitorS3Bucket"
                },
                "",
                "\n",
                "    AWS_S3_PREFIX=",
                {
                  "Ref": "AWS::StackName"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\n",
                "- \"content\": |-\n",
                "    {}\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\n",
                "- \"content\": \"\"\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/roles/slave_public\n",
                "- \"content\": \"\"\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/roles/aws\n"
              ]
            ]
          }
        },
        "AssociatePublicIpAddress": "true",
        "IamInstanceProfile": {
          "Ref": "SlaveInstanceProfile"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "RegionToAmi",
            {
              "Ref": "AWS::Region"
            },
            "stable"
          ]
        },
        "SecurityGroups": [
          {
            "Ref": "PublicSlaveSecurityGroup"
          }
        ],
        "BlockDeviceMappings": [
          {
            "VirtualName": "ephemeral0",
            "DeviceName": "/dev/sdb"
          }
        ],
        "KeyName": {
          "Ref": "KeyName"
        },
        "InstanceType": {
          "Fn::FindInMap": [
            "Parameters",
            "PublicSlaveInstanceType",
            "default"
          ]
        }
      }
    },
    "PublicSlaveToPublicSlaveIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "0",
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "ToPort": "65535",
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        }
      }
    },
    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "GatewayToInternet",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "Vpc": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "EnableDnsHostnames": "true",
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ],
        "CidrBlock": {
          "Fn::FindInMap": [
            "Parameters",
            "VPCSubnetRange",
            "default"
          ]
        },
        "EnableDnsSupport": "true"
      }
    },
    "MasterToSlaveIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "0",
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "MasterSecurityGroup"
        },
        "ToPort": "65535",
        "GroupId": {
          "Ref": "SlaveSecurityGroup"
        }
      }
    },
    "PublicSlaveSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Mesos Slaves Public",
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "PrivateInboundNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "RuleNumber": "100",
        "CidrBlock": "0.0.0.0/0",
        "Egress": "false",
        "Protocol": "-1",
        "PortRange": {
          "From": "0",
          "To": "65535"
        },
        "RuleAction": "allow",
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        }
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "PublicSlaveIngressFive": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "23",
        "CidrIp": "0.0.0.0/0",
        "IpProtocol": "udp",
        "ToPort": "5050",
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        }
      }
    },
    "PublicSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "Parameters",
            "PublicSubnetRange",
            "default"
          ]
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "AdminSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable admin access to servers",
        "VpcId": {
          "Ref": "Vpc"
        },
        "SecurityGroupIngress": [
          {
            "FromPort": "22",
            "CidrIp": {
              "Ref": "AdminLocation"
            },
            "IpProtocol": "tcp",
            "ToPort": "22"
          },
          {
            "FromPort": "80",
            "CidrIp": {
              "Ref": "AdminLocation"
            },
            "IpProtocol": "tcp",
            "ToPort": "80"
          },
          {
            "FromPort": "443",
            "CidrIp": {
              "Ref": "AdminLocation"
            },
            "IpProtocol": "tcp",
            "ToPort": "443"
          }
        ]
      }
    },
    "DHCPOptions": {
      "Type": "AWS::EC2::DHCPOptions",
      "Properties": {
        "DomainNameServers": [
          "AmazonProvidedDNS"
        ],
        "DomainName": {
          "Fn::If": [
            "RegionIsUsEast1",
            "ec2.internal",
            {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::Region"
                  },
                  ".compute.internal"
                ]
              ]
            }
          ]
        }
      }
    },
    "SlaveToMasterLBIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "2181",
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SlaveSecurityGroup"
        },
        "ToPort": "2181",
        "GroupId": {
          "Ref": "LbSecurityGroup"
        }
      }
    },
    "SlaveLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#cloud-config\n",
                "\"coreos\":\n",
                "  \"units\":\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"mask\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      etcd.service\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"mask\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      update-engine.service\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"mask\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      locksmithd.service\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"name\": |-\n",
                "      systemd-resolved.service\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Description=Formats the /var/lib ephemeral drive\n",
                "      Before=var-lib.mount dbus.service\n",
                "      [Service]\n",
                "      Type=oneshot\n",
                "      RemainAfterExit=yes\n",
                "      ExecStart=/bin/bash -c \"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\"\n",
                "    \"name\": |-\n",
                "      format-var-lib-ephemeral.service\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Description=Mount /var/lib\n",
                "      Before=dbus.service\n",
                "      [Mount]\n",
                "      What=/dev/xvdb\n",
                "      Where=/var/lib\n",
                "      Type=ext4\n",
                "    \"name\": |-\n",
                "      var-lib.mount\n",
                "  - \"command\": |-\n",
                "      restart\n",
                "    \"name\": |-\n",
                "      systemd-journald.service\n",
                "  - \"command\": |-\n",
                "      restart\n",
                "    \"name\": |-\n",
                "      docker.service\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Before=dcos.target\n",
                "      [Service]\n",
                "      Type=oneshot\n",
                "      StandardOutput=journal+console\n",
                "      StandardError=journal+console\n",
                "      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\n",
                "      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\n",
                "    \"name\": |-\n",
                "      dcos-link-env.service\n",
                "  - \"content\": |\n",
                "      [Unit]\n",
                "      Description=Download the DCOS\n",
                "      After=network-online.target\n",
                "      Wants=network-online.target\n",
                "      ConditionPathExists=!/opt/mesosphere/\n",
                "      [Service]\n",
                "      EnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\n",
                "      Type=oneshot\n",
                "      StandardOutput=journal+console\n",
                "      StandardError=journal+console\n",
                "      ExecStartPre=/usr/bin/curl --fail --retry 20 --continue-at - --location --silent --show-error --verbose --output /tmp/bootstrap.tar.xz https://downloads.mesosphere.com/dcos/EarlyAccess/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz\n",
                "      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\n",
                "      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\n",
                "      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\n",
                "    \"name\": |-\n",
                "      dcos-download.service\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Description=Prep the Pkgpanda working directories for this host.\n",
                "      Requires=dcos-download.service\n",
                "      After=dcos-download.service\n",
                "      [Service]\n",
                "      Type=oneshot\n",
                "      StandardOutput=journal+console\n",
                "      StandardError=journal+console\n",
                "      EnvironmentFile=/opt/mesosphere/environment\n",
                "      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\n",
                "      [Install]\n",
                "      WantedBy=multi-user.target\n",
                "    \"enable\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      dcos-setup.service\n",
                "    \"no_block\": !!bool |-\n",
                "      true\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |-\n",
                "      [Unit]\n",
                "      Description=Signal CloudFormation Success\n",
                "      After=dcos.target\n",
                "      Requires=dcos.target\n",
                "      ConditionPathExists=!/var/lib/dcos-cfn-signal\n",
                "      [Service]\n",
                "      Type=simple\n",
                "      Restart=on-failure\n",
                "      StartLimitInterval=0\n",
                "      RestartSec=15s\n",
                "      EnvironmentFile=/opt/mesosphere/environment\n",
                "      EnvironmentFile=/opt/mesosphere/etc/cfn_signal_metadata\n",
                "      Environment=\"AWS_CFN_SIGNAL_THIS_RESOURCE=SlaveServerGroup\"\n",
                "      ExecStartPre=/bin/ping -c1 leader.mesos\n",
                "      ExecStartPre=/opt/mesosphere/bin/cfn-signal\n",
                "      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal\n",
                "    \"name\": |-\n",
                "      dcos-cfn-signal.service\n",
                "  \"update\":\n",
                "    \"reboot-strategy\": |-\n",
                "      off\n",
                "\"write_files\":\n",
                "- \"content\": |\n",
                "    https://downloads.mesosphere.com/dcos/EarlyAccess\n",
                "  \"owner\": |-\n",
                "    root\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-flags/repository-url\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    BOOTSTRAP_ID=ba95b3cd10feeca83111a84137c517000fa205d8\n",
                "  \"owner\": |-\n",
                "    root\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-flags/bootstrap-id\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    [\"dcos-config--setup_81202b73c3b20f0ed21af57c9d6031e801728730\", \"dcos-metadata--setup_81202b73c3b20f0ed21af57c9d6031e801728730\"]\n",
                "  \"owner\": |-\n",
                "    root\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-flags/cluster-packages.json\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    [Journal]\n",
                "    MaxLevelConsole=warning\n",
                "  \"owner\": |-\n",
                "    root\n",
                "  \"path\": |-\n",
                "    /etc/systemd/journald.conf.d/dcos.conf\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    ",
                {
                  "Ref": "AWS::StackId"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/cluster-id\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    AWS_REGION=",
                {
                  "Ref": "AWS::Region"
                },
                "",
                "\n",
                "    AWS_STACK_ID=",
                {
                  "Ref": "AWS::StackId"
                },
                "",
                "\n",
                "    AWS_STACK_NAME=",
                {
                  "Ref": "AWS::StackName"
                },
                "",
                "\n",
                "    AWS_IAM_MASTER_ROLE_NAME=",
                {
                  "Ref": "MasterRole"
                },
                "",
                "\n",
                "    AWS_IAM_SLAVE_ROLE_NAME=",
                {
                  "Ref": "SlaveRole"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cfn_signal_metadata\n",
                "- \"content\": |\n",
                "    MESOS_CLUSTER=",
                {
                  "Ref": "AWS::StackName"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\n",
                "- \"content\": |\n",
                "    MASTER_SOURCE=exhibitor\n",
                "    EXHIBITOR_ADDRESS=",
                {
                  "Fn::GetAtt": [
                    "InternalMasterLoadBalancer",
                    "DNSName"
                  ]
                },
                "",
                "\n",
                "    RESOLVERS=169.254.169.253\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/dns_config\n",
                "- \"content\": |\n",
                "    EXHIBITOR_BACKEND=AWS_S3\n",
                "    AWS_REGION=",
                {
                  "Ref": "AWS::Region"
                },
                "",
                "\n",
                "    AWS_S3_BUCKET=",
                {
                  "Ref": "ExhibitorS3Bucket"
                },
                "",
                "\n",
                "    AWS_S3_PREFIX=",
                {
                  "Ref": "AWS::StackName"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\n",
                "- \"content\": |-\n",
                "    {}\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\n",
                "- \"content\": \"\"\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/roles/slave\n",
                "- \"content\": \"\"\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/roles/aws\n"
              ]
            ]
          }
        },
        "AssociatePublicIpAddress": "false",
        "IamInstanceProfile": {
          "Ref": "SlaveInstanceProfile"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "RegionToAmi",
            {
              "Ref": "AWS::Region"
            },
            "stable"
          ]
        },
        "SecurityGroups": [
          {
            "Ref": "SlaveSecurityGroup"
          }
        ],
        "BlockDeviceMappings": [
          {
            "VirtualName": "ephemeral0",
            "DeviceName": "/dev/sdb"
          }
        ],
        "KeyName": {
          "Ref": "KeyName"
        },
        "InstanceType": {
          "Fn::FindInMap": [
            "Parameters",
            "SlaveInstanceType",
            "default"
          ]
        }
      }
    },
    "PrivateOutboundNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "RuleNumber": "100",
        "CidrBlock": "0.0.0.0/0",
        "Egress": "true",
        "Protocol": "-1",
        "PortRange": {
          "From": "0",
          "To": "65535"
        },
        "RuleAction": "allow",
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        }
      }
    },
    "OutboundNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "RuleNumber": "100",
        "CidrBlock": "0.0.0.0/0",
        "Egress": "true",
        "Protocol": "-1",
        "PortRange": {
          "From": "0",
          "To": "65535"
        },
        "RuleAction": "allow",
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        }
      }
    },
    "PrivateRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": {
          "Ref": "NATInstance"
        }
      }
    },
    "PublicSlaveToMasterIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "0",
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "ToPort": "65535",
        "GroupId": {
          "Ref": "MasterSecurityGroup"
        }
      }
    },
    "PublicSlaveIngressSix": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "5052",
        "CidrIp": "0.0.0.0/0",
        "IpProtocol": "udp",
        "ToPort": "65535",
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        }
      }
    },
    "NATInstance": {
      "Type": "AWS::EC2::Instance",
      "DependsOn": "GatewayToInternet",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "NATAmi",
            {
              "Ref": "AWS::Region"
            },
            "default"
          ]
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "true",
            "DeleteOnTermination": "true",
            "SubnetId": {
              "Ref": "PublicSubnet"
            },
            "DeviceIndex": "0",
            "GroupSet": [
              {
                "Ref": "SlaveSecurityGroup"
              },
              {
                "Ref": "MasterSecurityGroup"
              },
              {
                "Ref": "AdminSecurityGroup"
              }
            ]
          }
        ],
        "InstanceType": "m3.medium",
        "SourceDestCheck": "false"
      }
    },
    "PrivateSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        },
        "SubnetId": {
          "Ref": "PrivateSubnet"
        }
      }
    },
    "MasterServerGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn": "GatewayToInternet",
      "Properties": {
        "LaunchConfigurationName": {
          "Ref": "MasterLaunchConfig"
        },
        "LoadBalancerNames": [
          {
            "Ref": "ElasticLoadBalancer"
          },
          {
            "Ref": "InternalMasterLoadBalancer"
          }
        ],
        "VPCZoneIdentifier": [
          {
            "Ref": "PublicSubnet"
          }
        ],
        "AvailabilityZones": [
          {
            "Fn::GetAtt": [
              "PublicSubnet",
              "AvailabilityZone"
            ]
          }
        ],
        "DesiredCapacity": 1,
        "MinSize": 1,
        "Tags": [
          {
            "PropagateAtLaunch": "true",
            "Key": "role",
            "Value": "mesos-master"
          }
        ],
        "MaxSize": 1
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": 1,
          "Timeout": {
            "Fn::FindInMap": [
              "Parameters",
              "StackCreationTimeout",
              "default"
            ]
          }
        }
      }
    },
    "LbSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Mesos Master LB",
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "PublicSlaveServerGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn": "GatewayToInternet",
      "Properties": {
        "LaunchConfigurationName": {
          "Ref": "PublicSlaveLaunchConfig"
        },
        "LoadBalancerNames": [
          {
            "Ref": "PublicSlaveLoadBalancer"
          }
        ],
        "VPCZoneIdentifier": [
          {
            "Ref": "PublicSubnet"
          }
        ],
        "AvailabilityZones": [
          {
            "Fn::GetAtt": [
              "PublicSubnet",
              "AvailabilityZone"
            ]
          }
        ],
        "DesiredCapacity": {
          "Ref": "PublicSlaveInstanceCount"
        },
        "MinSize": {
          "Ref": "PublicSlaveInstanceCount"
        },
        "Tags": [
          {
            "PropagateAtLaunch": "true",
            "Key": "role",
            "Value": "mesos-slave"
          }
        ],
        "MaxSize": {
          "Ref": "PublicSlaveInstanceCount"
        }
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": {
            "Ref": "PublicSlaveInstanceCount"
          },
          "Timeout": {
            "Fn::FindInMap": [
              "Parameters",
              "StackCreationTimeout",
              "default"
            ]
          }
        }
      }
    },
    "SlaveSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Mesos Slaves",
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "PrivateNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "PrivateSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "Parameters",
            "PrivateSubnetRange",
            "default"
          ]
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Private"
          }
        ]
      }
    },
    "ElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "DependsOn": "GatewayToInternet",
      "Properties": {
        "SecurityGroups": [
          {
            "Ref": "LbSecurityGroup"
          },
          {
            "Ref": "AdminSecurityGroup"
          }
        ],
        "Listeners": [
          {
            "LoadBalancerPort": "80",
            "InstancePort": "80",
            "InstanceProtocol": "HTTP",
            "Protocol": "HTTP"
          },
          {
            "LoadBalancerPort": "443",
            "InstancePort": "443",
            "InstanceProtocol": "TCP",
            "Protocol": "TCP"
          }
        ],
        "HealthCheck": {
          "Interval": "30",
          "UnhealthyThreshold": "2",
          "Timeout": "5",
          "Target": "HTTP:5050/health",
          "HealthyThreshold": "2"
        },
        "Subnets": [
          {
            "Ref": "PublicSubnet"
          }
        ]
      }
    },
    "GatewayToInternet": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "DependsOn": "InternetGateway",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    }
  },
  "Metadata": {
    "DcosImageCommit": "9eda4ae45de5488c0cba0196a17ef4512765956f",
    "TemplateGenerationDate": "2016-02-12 04:14:18.910524"
  }
}
